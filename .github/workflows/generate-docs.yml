name: Generate API Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'app/**'
      - 'pyproject.toml'
      - '.github/workflows/generate-docs.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'app/**'
      - 'pyproject.toml'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  pages: write
  id-token: write

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      run: uv python install 3.11
      
    - name: Install dependencies
      run: uv sync
      
    - name: Start FastAPI server
      run: |
        uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10  # Wait for server to start
      
    - name: Generate OpenAPI JSON
      run: |
        curl -o openapi.json http://localhost:8000/openapi.json
        
    - name: Verify OpenAPI JSON
      run: |
        if [ ! -f openapi.json ]; then
          echo "Failed to generate openapi.json"
          exit 1
        fi
        echo "OpenAPI JSON generated successfully"
        head -20 openapi.json
        
    - name: Setup Node.js for documentation generation
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Redoc CLI
      run: npm install -g redoc-cli
      
    - name: Generate HTML documentation
      run: |
        redoc-cli build openapi.json --output api-docs.html --title "Training Plan API Documentation"
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: |
          openapi.json
          api-docs.html
        retention-days: 30
        
    - name: Deploy to GitHub Pages (if main/master branch)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        publish_branch: gh-pages
        destination_dir: docs
        keep_files: true
        include_files: |
          api-docs.html
          openapi.json
        exclude_files: |
          .github/**
          app/**
          tests/**
          scripts/**
          data/**
          
    - name: Comment PR with documentation links
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          try {
            // Read OpenAPI spec to get API info
            const openapi = JSON.parse(fs.readFileSync('openapi.json', 'utf8'));
            const apiTitle = openapi.info.title;
            const apiVersion = openapi.info.version;
            
            // Count endpoints
            const paths = Object.keys(openapi.paths);
            const endpointCount = paths.reduce((count, path) => {
              return count + Object.keys(openapi.paths[path]).length;
            }, 0);
            
            const comment = [
              '## ðŸ“š API Documentation Generated',
              '',
              `**${apiTitle}** (v${apiVersion})`,
              '',
              `- **Endpoints**: ${endpointCount} endpoints across ${paths.length} paths`,
              '- **Documentation**: Available in the artifacts section below',
              '- **OpenAPI Spec**: `openapi.json` artifact',
              '- **HTML Docs**: `api-docs.html` artifact',
              '',
              '### API Endpoints Summary:',
              ...paths.map(path => `- \`${path}\``),
              '',
              'ðŸ”— Download the documentation artifacts to view the full interactive API documentation.'
            ].join('\n');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Failed to comment on PR:', error.message);
            console.log('This might be due to permissions or because this is a fork.');
            // Don't fail the entire workflow for comment failures
          }